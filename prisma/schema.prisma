generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  name               String              @unique
  email              String              @unique
  password           String
  refreshToken       String
  expiresAt          DateTime
  imageUrl           String?             @default("")
  isActive           Boolean?            @default(false)
  messageSent        ChatMessage[]       @relation("messageSent")
  friendshipReceived FriendshipRequest[] @relation("friendshipReceived")
  friendshipSent     FriendshipRequest[] @relation("friendshipSent")
  userFriends        UserFriend[]        @relation("friendUsers")
  friends            UserFriend[]        @relation("userFriends")
  chat               Chat[]              @relation("ChatToUser")

  @@map("user")
}

model UserFriend {
  id       String @id @default(uuid())
  userId   String
  friendId String
  friend   User   @relation("friendUsers", fields: [friendId], references: [id], onDelete: Cascade)
  user     User   @relation("userFriends", fields: [userId], references: [id], onDelete: Cascade)

  @@map("userFriend")
}

model FriendshipRequest {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  isAccepted Boolean? @default(false)
  receiver   User     @relation("friendshipReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("friendshipSent", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("friendshipRequest")
}

model Chat {
  id       String        @id @default(uuid())
  isGroup  Boolean?      @default(false)
  name     String
  imageUrl String?       @default("")
  messages ChatMessage[] @relation("chatMessages")
  users    User[]        @relation("ChatToUser")

  @@map("chat")
}

model ChatMessage {
  id           String   @id @default(uuid())
  idChat       String
  senderId     String
  message      String
  createdAt    DateTime
  isReadBy     String[] @default([])
  isReceivedBy String[] @default([])
  chat         Chat     @relation("chatMessages", fields: [idChat], references: [id], onDelete: Cascade)
  sender       User     @relation("messageSent", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("chatMessage")
}
